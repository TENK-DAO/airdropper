// This is a generated file by witgen (https://github.com/bnjjj/witgen), please do not edit yourself, you can generate a new one thanks to cargo witgen generate command. (witme v0.2.4) 

// This is a generated file by witgen (https://github.com/bnjjj/witgen), please do not edit yourself, you can generate a new one thanks to cargo witgen generate command. (witme v0.2.0) 

///  StorageUsage is used to count the amount of storage used by a contract.
type storage-usage = u64

///  Balance is a type for storing amounts of tokens, specified in yoctoNEAR.
type balance = u128

///  Represents the amount of NEAR tokens in "gas units" which are used to fund transactions.
type gas = u64

///  base64 string.
type base64-vec-u8 = string

///  Raw type for duration in nanoseconds
type duration = u64

///  @minLength 2
///  @maxLength 64
///  @pattern ^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$
type account-id = string

///  String representation of a u128-bit integer
///  @pattern ^[0-9]+$
type u128 = string

///  Public key in a binary format with base58 string serialization with human-readable curve.
///  The key types currently supported are `secp256k1` and `ed25519`.
/// 
///  Ed25519 public keys accepted are 32 bytes and secp256k1 keys are the uncompressed 64 format.
type public-key = string

///  Raw type for timestamp in nanoseconds
type timestamp = u64

// This is a generated file by witgen (https://github.com/bnjjj/witgen), please do not edit yourself, you can generate a new one thanks to cargo witgen generate command. (witme v0.1.0) 

///  In this implementation, the Token struct takes two extensions standards (metadata and approval) as optional fields, as they are frequently used in modern NFTs.
record token {
    token-id: token-id,
    owner-id: account-id,
    metadata: option<token-metadata>,
    approved-account-ids: option<list<tuple<account-id,u64>>>
}

record fungible-token-metadata {
    spec: string,
    name: string,
    symbol: string,
    icon: option<string>,
    reference: option<string>,
    reference-hash: option<base64-vec-u8>,
    decimals: u8
}

///  Note that token IDs for NFTs are strings on NEAR. It's still fine to use autoincrementing numbers as unique IDs if desired, but they should be stringified. This is to make IDs more future-proof as chain-agnostic conventions and standards arise, and allows for more flexibility with considerations like bridging NFTs across chains, etc.
type token-id = string

///  Metadata for the NFT contract itself.
record nft-contract-metadata {
    spec: string,
    name: string,
    symbol: string,
    icon: option<string>,
    base-uri: option<string>,
    reference: option<string>,
    reference-hash: option<base64-vec-u8>
}

record storage-balance-bounds {
    min: u128,
    max: option<u128>
}

///  Metadata on the individual token level.
record token-metadata {
    title: option<string>,
    description: option<string>,
    media: option<string>,
    media-hash: option<base64-vec-u8>,
    copies: option<u64>,
    issued-at: option<string>,
    expires-at: option<string>,
    starts-at: option<string>,
    updated-at: option<string>,
    extra: option<string>,
    reference: option<string>,
    reference-hash: option<base64-vec-u8>
}

record storage-balance {
    total: u128,
    available: u128
}

type wrapped-duration = string

///  Revoke all approved accounts for a specific token.
/// 
///  Requirements
///  * Caller of the method must attach a deposit of 1 yoctoⓃ for security
///    purposes
///  * If contract requires >1yN deposit on `nft_approve`, contract
///    MUST refund all associated storage deposit when owner revokes approvals
///  * Contract MUST panic if called by someone other than token owner
/// 
///  Arguments:
///  * `token_id`: the token with approvals to revoke
///  change
nft-revoke-all: function(token-id: token-id)

///  change
transfer-ownership: function(new-owner: account-id)

///  change
nft-mint: function(token-id: token-id, token-owner-id: account-id, title: string) -> token


cost-per-token: function() -> u128


///  Simple transfer. Transfer a given `token_id` from current owner to
///  `receiver_id`.
/// 
///  Requirements
///  * Caller of the method must attach a deposit of 1 yoctoⓃ for security purposes
///  * Contract MUST panic if called by someone other than token owner or,
///    if using Approval Management, one of the approved accounts
///  * `approval_id` is for use with Approval Management,
///    see <https://nomicon.io/Standards/NonFungibleToken/ApprovalManagement.html>
///  * If using Approval Management, contract MUST nullify approved accounts on
///    successful transfer.
///  * TODO: needed? Both accounts must be registered with the contract for transfer to
///    succeed. See see <https://nomicon.io/Standards/StorageManagement.html>
/// 
///  Arguments:
///  * `receiver_id`: the valid NEAR account receiving the token
///  * `token_id`: the token to transfer
///  * `approval_id`: expected approval ID. A number smaller than
///     2^53, and therefore representable as JSON. See Approval Management
///     standard for full explanation.
///  * `memo` (optional): for use cases that may benefit from indexing or
///     providing information for a transfer
///  change
nft-transfer: function(receiver-id: account-id, token-id: token-id, approval-id: option<u64>, memo: option<string>)

///  Check if a token is approved for transfer by a given account, optionally
///  checking an approval_id
/// 
///  Arguments:
///  * `token_id`: the token for which to revoke an approval
///  * `approved_account_id`: the account to check the existence of in `approvals`
///  * `approval_id`: an optional approval ID to check against current approval ID for given account
/// 
///  Returns:
///  if `approval_id` given, `true` if `approved_account_id` is approved with given `approval_id`
///  otherwise, `true` if `approved_account_id` is in list of approved accounts
nft-is-approved: function(token-id: token-id, approved-account-id: account-id, approval-id: option<u64>) -> bool


///  change
update-uri: function(uri: string)

nft-payout: function(token-id: string, balance: u128, max-len-payout: option<u32>) -> payout


///  Get a list of all tokens
/// 
///  Arguments:
///  * `from_index`: a string representing an unsigned 128-bit integer,
///     representing the starting index of tokens to return. (default 0)
///  * `limit`: the maximum number of tokens to return (default total supply)
///             Could fail on gas
/// 
///  Returns an array of Token objects, as described in Core standard
nft-tokens: function(from-index: option<u128>, limit: option<u64>) -> list<token>


///  Transfer token and call a method on a receiver contract. A successful
///  workflow will end in a success execution outcome to the callback on the NFT
///  contract at the method `nft_resolve_transfer`.
/// 
///  You can think of this as being similar to attaching native NEAR tokens to a
///  function call. It allows you to attach any Non-Fungible Token in a call to a
///  receiver contract.
/// 
///  Requirements:
///  * Caller of the method must attach a deposit of 1 yoctoⓃ for security
///    purposes
///  * Contract MUST panic if called by someone other than token owner or,
///    if using Approval Management, one of the approved accounts
///  * The receiving contract must implement `ft_on_transfer` according to the
///    standard. If it does not, FT contract's `ft_resolve_transfer` MUST deal
///    with the resulting failed cross-contract call and roll back the transfer.
///  * Contract MUST implement the behavior described in `ft_resolve_transfer`
///  * `approval_id` is for use with Approval Management extension, see
///    that document for full explanation.
///  * If using Approval Management, contract MUST nullify approved accounts on
///    successful transfer.
/// 
///  Arguments:
///  * `receiver_id`: the valid NEAR account receiving the token.
///  * `token_id`: the token to send.
///  * `approval_id`: expected approval ID. A number smaller than
///     2^53, and therefore representable as JSON. See Approval Management
///     standard for full explanation.
///  * `memo` (optional): for use cases that may benefit from indexing or
///     providing information for a transfer.
///  * `msg`: specifies information needed by the receiving contract in
///     order to properly handle the transfer. Can indicate both a function to
///     call and the parameters to pass to that function.
///  change
nft-transfer-call: function(receiver-id: account-id, token-id: token-id, approval-id: option<u64>, memo: option<string>, msg: string)

total-cost: function(num: u32) -> u128


///  change
nft-transfer-payout: function(receiver-id: account-id, token-id: string, approval-id: option<u64>, memo: option<string>, balance: u128, max-len-payout: option<u32>) -> payout


///  Revoke an approved account for a specific token.
/// 
///  Requirements
///  * Caller of the method must attach a deposit of 1 yoctoⓃ for security
///    purposes
///  * If contract requires >1yN deposit on `nft_approve`, contract
///    MUST refund associated storage deposit when owner revokes approval
///  * Contract MUST panic if called by someone other than token owner
/// 
///  Arguments:
///  * `token_id`: the token for which to revoke an approval
///  * `account_id`: the account to remove from `approvals`
///  change
nft-revoke: function(token-id: token-id, account-id: account-id)

///  change
new: function(owner-id: account-id, metadata: nft-contract-metadata, size: u32)

record royalties {
    accounts: list<tuple<account-id,basis-point>>,
    percent: basis-point
}

///  Returns the token with the given `token_id` or `null` if no such token.
nft-token: function(token-id: token-id) -> option<token>


///  Returns the total supply of non-fungible tokens as a string representing an
///  unsigned 128-bit integer to avoid JSON number limit of 2^53.
nft-total-supply: function() -> u128


///  milliseconds elapsed since the UNIX epoch
type timestamp-ms = u64

token-storage-cost: function() -> u128


///  Add an approved account for a specific token.
/// 
///  Requirements
///  * Caller of the method must attach a deposit of at least 1 yoctoⓃ for
///    security purposes
///  * Contract MAY require caller to attach larger deposit, to cover cost of
///    storing approver data
///  * Contract MUST panic if called by someone other than token owner
///  * Contract MUST panic if addition would cause `nft_revoke_all` to exceed
///    single-block gas limit
///  * Contract MUST increment approval ID even if re-approving an account
///  * If successfully approved or if had already been approved, and if `msg` is
///    present, contract MUST call `nft_on_approve` on `account_id`. See
///    `nft_on_approve` description below for details.
/// 
///  Arguments:
///  * `token_id`: the token for which to add an approval
///  * `account_id`: the account to add to `approvals`
///  * `msg`: optional string to be passed to `nft_on_approve`
/// 
///  Returns void, if no `msg` given. Otherwise, returns promise call to
///  `nft_on_approve`, which can resolve with whatever it wants.
///  change
nft-approve: function(token-id: token-id, account-id: account-id, msg: option<string>)

///  Get number of tokens owned by a given account
/// 
///  Arguments:
///  * `account_id`: a valid NEAR account
/// 
///  Returns the number of non-fungible tokens owned by given `account_id` as
///  a string representing the value as an unsigned 128-bit integer to avoid JSON
///  number limit of 2^53.
nft-supply-for-owner: function(account-id: account-id) -> u128


nft-metadata: function() -> nft-contract-metadata


///  change
new-default-meta: function(owner-id: account-id, metadata: initial-metadata, size: u32)

record initial-metadata {
    name: string,
    symbol: string,
    uri: string,
    icon: option<string>,
    spec: option<string>,
    reference: option<string>,
    reference-hash: option<base64-vec-u8>
}

///  Get list of all tokens owned by a given account
/// 
///  Arguments:
///  * `account_id`: a valid NEAR account
///  * `from_index`: a string representing an unsigned 128-bit integer,
///     representing the starting index of tokens to return. (default 0)
///  * `limit`: the maximum number of tokens to return. (default unlimited)
///             Could fail on gas
/// 
///  Returns a paginated list of all tokens owned by this account
nft-tokens-for-owner: function(account-id: account-id, from-index: option<u128>, limit: option<u64>) -> list<token>


type basis-point = u16

///  change
nft-mint-many: function(token-owners: list<account-id>, max: u32)

///  Copied from https://github.com/near/NEPs/blob/6170aba1c6f4cd4804e9ad442caeae9dc47e7d44/specs/Standards/NonFungibleToken/Payout.md#reference-level-explanation
///  A mapping of NEAR accounts to the amount each should be paid out, in
///  the event of a token-sale. The payout mapping MUST be shorter than the
///  maximum length specified by the financial contract obtaining this
///  payout data. Any mapping of length 10 or less MUST be accepted by
///  financial contracts, so 10 is a safe upper limit.
///  This currently deviates from the standard but is in the process of updating to use this type
record payout {
    payout: list<tuple<account-id,u128>>
}

Currently the work is open source. https://github.com/TENK-DAO/tenk, its goal is to create free tools for artists to publish collections of material to the NEAR blockchain and retain royalties on them when their art is resold.

The funds that we raise through helping launch collections, will be used to pay contractors who help build the store fronts and help guide the artists through the technical difficulties. 

Most artist that launched on Ethereum ended up losing money because the platform is expensive to launch. For us it is requires only 50 USD and buyers pay for the rest of the fees (which are minimal). This means we are helping get more money into the hands of artists so that they can focus on creating more beauty.

Beyond this we hope that the open source code that we write will help Estonians (or anyone) to learn how to use Rust, one of the leading programming languages.

